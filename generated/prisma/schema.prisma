// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @map("_id")
  name          String     @unique
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  likes         Like[]
  posts         Slang[]
  bookmarks     Bookmark[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Slang {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  example       String[]
  explaination  String
  like          Like[]
  category      Category?  @relation("CategorySlangs", fields: [category_id], references: [id])
  category_id   String?    @db.ObjectId
  view          Int        @default(0)
  posted_by     User       @relation(fields: [user_id], references: [id])
  user_id       String
  bookmarked_by Bookmark[]
  createdAt     DateTime
  updatedAt     DateTime

  @@map("slang")
}

model Like {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  slang    Slang  @relation(fields: [slang_id], references: [id])
  slang_id String @db.ObjectId
  liked_by User   @relation(fields: [user_id], references: [id])
  user_id  String

  @@map("like")
}

model Category {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  slangs Slang[] @relation("CategorySlangs")

  @@map("category")
}

model Bookmark {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  Slang    Slang  @relation(fields: [slang_id], references: [id])
  slang_id String @db.ObjectId
  user     User   @relation(fields: [user_id], references: [id])
  user_id  String

  @@index([slang_id])
  @@map("bookmark")
}
